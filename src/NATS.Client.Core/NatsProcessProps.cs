namespace NATS.Client.Core;

/// <remarks></remarks>
/// <inheritdoc />
public record NatsProcessProps : NatsMessagingProps
{
    private long _subjectValue = 0;

    internal NatsProcessProps(string subject, int subscriptionId)
        : base(subject)
    {
        SubscriptionId = subscriptionId;
    }

    /// <summary>
    /// A unique numeric subscription ID, generated by the client.
    /// </summary>
    public int SubscriptionId { get; internal set; }

    /// <summary>
    /// The subscription that was used to create the subscription and can be used to unsubscribe
    /// </summary>
    public NatsSubscribeProps? Subscription { get; internal set; } = null;

    // check if the subject is a reply to a request by checking if the subject length is less than two NUIDs + dots
    // e.g. _INBOX.Hu5HPpWesrJhvQq2NG3YJ6.Hu5HPpWesrJhvQq2NG3YLw
    //  vs. _INBOX.Hu5HPpWesrJhvQq2NG3YJ6.1234
    // otherwise, it's not a reply in direct mode.
    internal bool IsReplyToRequest(string inboxPrefix) => IsInboxSubject(inboxPrefix) && Subject.ToString().Length < inboxPrefix.Length + 1 + 22 + 1 + 22;

    internal long SubjectNumber(string inboxPrefix)
    {
        if (IsInboxSubject(inboxPrefix) && _subjectValue == 0)
        {
            var idString = Subject.ToString().AsSpan().Slice((inboxPrefix?.Length ?? 0) + 1)
#if NETSTANDARD2_0
                .ToString()
#endif
                ;

            if (long.TryParse(idString, out var id))
            {
                _subjectValue = id;
            }
        }

        return _subjectValue;
    }
}
